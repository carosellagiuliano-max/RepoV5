name: Production End-to-End Tests

'on':
  # Run on main branch pushes
  push:
    branches: [main, production]
  
  # Run on pull requests to main
  pull_request:
    branches: [main]
  
  # Allow manual triggers
  workflow_dispatch:
    inputs:
      production_url:
        description: 'Production URL to test'
        required: false
        default: 'https://your-site.netlify.app'
        type: string
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - modular
          - basic
          - security
          - lighthouse
          - health
      quick_mode:
        description: 'Run in quick mode (skip Lighthouse)'
        required: false
        default: false
        type: boolean

jobs:
  # Unit tests and linting for forked PRs (no secrets access)
  forked-pr-tests:
    name: Forked PR - Unit Tests & Linting
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npx tsc --noEmit
        
      - name: Run unit tests
        run: npm test
        
      - name: Comment on forked PR
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🔒 Forked PR - Limited Testing
            
            **Security Notice:** This PR originates from a forked repository, so it runs with limited permissions.
            
            **Tests Run:**
            - ✅ ESLint code quality checks
            - ✅ TypeScript type checking  
            - ✅ Unit tests
            
            **Tests Skipped:** 
            - 🔒 Preview environment deployment (requires secrets)
            - 🔒 End-to-end tests against deployed environment
            - 🔒 Lighthouse performance audits
            - 🔒 Security validation tests
            
            **Next Steps:**
            Once this PR is merged or the branch is pushed to the main repository, the full test suite including preview environment deployment and comprehensive E2E tests will run.
            
            **For maintainers:** To run the full test suite, you can:
            1. Check out this branch locally and push it to the main repository
            2. Or merge this PR and the full tests will run on the main branch
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deploy to preview environment for PR testing
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
    timeout-minutes: 15
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      deploy-status: ${{ steps.deploy.outputs.deploy-status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check secrets availability
        id: check-secrets
        run: |
          if [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ] || [ -z "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "secrets-available=false" >> $GITHUB_OUTPUT
            echo "❌ Missing required secrets for Netlify deployment"
          else
            echo "secrets-available=true" >> $GITHUB_OUTPUT
            echo "✅ Netlify secrets are available"
          fi
        
      - name: Comment on missing secrets
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ⚠️ Preview Deployment Skipped - Missing Secrets
            
            **Required Secrets Missing:**
            - \`NETLIFY_AUTH_TOKEN\`: Personal Access Token from Netlify
            - \`NETLIFY_SITE_ID\`: Site ID from your Netlify dashboard
            
            **To enable preview deployments:**
            
            1. **Create a Netlify Personal Access Token:**
               - Go to [Netlify User Settings > Personal Access Tokens](https://app.netlify.com/user/applications#personal-access-tokens)
               - Click "New access token"
               - Copy the generated token
            
            2. **Find your Site ID:**
               - Go to your Netlify site dashboard
               - Navigate to Site Settings > General
               - Copy the "Site ID" value
            
            3. **Add secrets to GitHub:**
               - Go to Repository Settings > Secrets and variables > Actions
               - Add \`NETLIFY_AUTH_TOKEN\` with your personal access token
               - Add \`NETLIFY_SITE_ID\` with your site ID
            
            **Fallback:** E2E tests will run against the production URL instead of a preview environment.
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        
      - name: Setup Node.js
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        if: steps.check-secrets.outputs.secrets-available == 'true'
        run: npm ci
        
      - name: Build for preview
        if: steps.check-secrets.outputs.secrets-available == 'true'
        run: npm run build
        env:
          NODE_ENV: staging
          
      - name: Deploy to Netlify Preview
        id: deploy
        if: steps.check-secrets.outputs.secrets-available == 'true'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          npm install -g netlify-cli
          
          # Deploy to preview with build and unique alias
          PREVIEW_ALIAS="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-8)"
          
          echo "Deploying to Netlify with alias: $PREVIEW_ALIAS"
          
          netlify deploy \
            --build \
            --site "$NETLIFY_SITE_ID" \
            --auth "$NETLIFY_AUTH_TOKEN" \
            --alias "$PREVIEW_ALIAS" \
            --message "CI Preview for PR #${{ github.event.number }}" \
            --json > deploy-result.json
            
          # Extract preview URL
          PREVIEW_URL=$(cat deploy-result.json | jq -r '.deploy_url')
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "deploy-status=success" >> $GITHUB_OUTPUT
          echo "Preview deployed to: $PREVIEW_URL"
          
          # Enhanced URL health check with exponential backoff
          echo "Waiting for preview to be ready with exponential backoff..."
          
          MAX_ATTEMPTS=10
          ATTEMPT=1
          DELAY=5
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking $PREVIEW_URL"
            
            if curl -f -s --max-time 30 "$PREVIEW_URL" > /dev/null; then
              echo "✅ Preview URL is responding successfully"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "❌ Preview URL failed to respond after $MAX_ATTEMPTS attempts"
                echo "deploy-status=failed" >> $GITHUB_OUTPUT
                exit 1
              fi
              
              echo "❌ Preview not ready, waiting ${DELAY}s before retry..."
              sleep $DELAY
              
              # Exponential backoff: increase delay for next attempt
              DELAY=$((DELAY * 2))
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "✅ Preview deployment verified and ready for testing"
        
      - name: Set deployment failure status
        id: deploy-failed
        if: failure() && steps.check-secrets.outputs.secrets-available == 'true'
        run: |
          echo "deploy-status=failed" >> $GITHUB_OUTPUT
          
      - name: Comment preview URL on PR
        if: always() && steps.check-secrets.outputs.secrets-available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            const deployStatus = '${{ steps.deploy.outputs.deploy-status }}';
            
            let comment;
            
            if (deployStatus === 'success' && previewUrl) {
              comment = `## 🚀 Preview Deployment Ready
              
              **Preview URL:** ${previewUrl}
              
              The preview environment has been deployed and is ready for testing.
              End-to-end tests will run against this preview deployment to ensure staging mirrors production.
              
              **Preview Features:**
              - ✅ Full-stack staging mirror
              - ✅ Production-like configuration
              - ✅ Real database connections (staging)
              - ✅ Complete integration testing
              - ✅ Exponential backoff health verification
              
              ⏳ **Next:** Automated E2E tests are now running against this preview...
              `;
            } else {
              comment = `## ❌ Preview Deployment Failed
              
              The preview environment deployment failed. E2E tests will run against the production URL as a fallback.
              
              **Fallback behavior:**
              - Tests will use production URL for validation
              - Security and Lighthouse checks will still run
              - Check the "Deploy Preview Environment" job logs for details
              
              Please check the deployment logs and ensure:
              - Netlify secrets are properly configured
              - Build process completes successfully
              - Network connectivity is available
              `;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Enhanced production E2E tests with preview support
  production-e2e-tests:
    name: Production E2E Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [deploy-preview]
    if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) # Run even if preview deployment fails (fallback to production URL)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y curl jq bc
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Determine test URL and validate preview
        id: test-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            # Verify preview URL is still accessible with exponential backoff
            echo "Verifying preview URL accessibility: $PREVIEW_URL"
            
            MAX_ATTEMPTS=5
            ATTEMPT=1
            DELAY=3
            URL_ACCESSIBLE=false
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Verification attempt $ATTEMPT/$MAX_ATTEMPTS"
              
              if curl -f -s --max-time 15 "$PREVIEW_URL" > /dev/null; then
                echo "✅ Preview URL is accessible"
                URL_ACCESSIBLE=true
                break
              else
                echo "❌ Preview URL not accessible, waiting ${DELAY}s..."
                sleep $DELAY
                DELAY=$((DELAY * 2))
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done
            
            if [ "$URL_ACCESSIBLE" = "true" ]; then
              TEST_URL="$PREVIEW_URL"
              TEST_ENV="preview"
              echo "✅ Using verified preview deployment URL: $TEST_URL"
            else
              echo "❌ Preview URL failed verification, falling back to production"
              TEST_URL="${{ github.event.inputs.production_url || secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}"
              TEST_ENV="fallback-from-preview"
            fi
          elif [ "${{ github.event.inputs.production_url }}" != "" ]; then
            TEST_URL="${{ github.event.inputs.production_url }}"
            TEST_ENV="manual"
            echo "Using manual input URL: $TEST_URL"
          elif [ "${{ secrets.PRODUCTION_URL }}" != "" ]; then
            TEST_URL="${{ secrets.PRODUCTION_URL }}"
            TEST_ENV="production"
            echo "Using production URL: $TEST_URL"
          else
            TEST_URL="https://your-site.netlify.app"
            TEST_ENV="fallback"
            echo "Using fallback URL: $TEST_URL"
          fi
          
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "test-env=$TEST_ENV" >> $GITHUB_OUTPUT
          
          # Fail fast if no valid URL is available
          if [ "$TEST_URL" = "" ]; then
            echo "❌ No valid test URL available. Cannot proceed with E2E tests."
            exit 1
          fi
        
      - name: Run modular production E2E tests
        env:
          PREVIEW_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          PRODUCTION_URL: ${{ steps.test-url.outputs.test-url }}
          TEST_ENV: ${{ steps.test-url.outputs.test-env }}
        run: |
          # Set test options based on inputs
          TEST_OPTIONS=""
          if [ "${{ github.event.inputs.test_suite }}" = "modular" ] || [ "${{ github.event.inputs.test_suite }}" = "" ] || [ "${{ github.event.inputs.test_suite }}" = "all" ]; then
            echo "Running modular test suite..."
            # Run modular tests
            npm run test src/test/modular-production-e2e.test.ts
            TEST_OPTIONS="--suite modular"
          fi
          
          if [ "${{ github.event.inputs.test_suite }}" != "modular" ]; then
            if [ "${{ github.event.inputs.test_suite }}" != "" ] && [ "${{ github.event.inputs.test_suite }}" != "all" ]; then
              TEST_OPTIONS="--suite ${{ github.event.inputs.test_suite }}"
            fi
            if [ "${{ github.event.inputs.quick_mode }}" = "true" ]; then
              TEST_OPTIONS="$TEST_OPTIONS --quick"
            fi
            
            # Run the master test suite
            ./scripts/run-master-e2e-tests.sh $TEST_OPTIONS
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-results-${{ github.run_number }}
          path: |
            test-results/
            !test-results/**/*.log
          retention-days: 30
          
      - name: Upload detailed logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-logs-${{ github.run_number }}
          path: test-results/**/*.log
          retention-days: 7
          
      - name: Comment PR with enhanced results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const testUrl = '${{ steps.test-url.outputs.test-url }}';
            const testEnv = '${{ steps.test-url.outputs.test-env }}';
            const previewUrl = '${{ needs.deploy-preview.outputs.preview-url }}';
            
            // Find the latest test results
            const resultsDir = './test-results';
            let summary = null;
            
            if (fs.existsSync(resultsDir)) {
              const dirs = fs.readdirSync(resultsDir)
                .filter(d => d.startsWith('master-e2e-'))
                .sort()
                .reverse();
                
              if (dirs.length > 0) {
                const latestDir = path.join(resultsDir, dirs[0]);
                const summaryFile = path.join(latestDir, 'master-test-summary.json');
                
                if (fs.existsSync(summaryFile)) {
                  summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
                }
              }
            }
            
            // Create enhanced comment with preview information
            let comment = `## 🧪 Enhanced Production E2E Test Results\n\n`;
            
            if (previewUrl) {
              comment += `**🚀 Preview Environment:** ${previewUrl}\n`;
              comment += `**✅ Full-Stack Staging Mirror:** Tests ran against deployed preview\n`;
            }
            
            comment += `**🌐 Test URL:** ${testUrl}\n`;
            comment += `**🏷️ Environment:** ${testEnv}\n\n`;
            
            if (summary) {
              const statusIcon = summary.summary.failedSuites === 0 ? '✅' : '❌';
              const statusText = summary.summary.failedSuites === 0 ? 'PASSED' : 'FAILED';
              
              comment += `**Status:** ${statusIcon} ${statusText}\n`;
              comment += `**Success Rate:** ${summary.summary.successRate}%\n\n`;
              
              comment += `| Metric | Value |\n`;
              comment += `|--------|---------|\n`;
              comment += `| Total Suites | ${summary.summary.totalSuites} |\n`;
              comment += `| Passed | ✅ ${summary.summary.passedSuites} |\n`;
              comment += `| Failed | ❌ ${summary.summary.failedSuites} |\n\n`;
              
              comment += `### 📋 Test Categories\n`;
              comment += summary.requirements.map(req => 
                `- ${summary.suites.find(s => s.name.includes(req.split(' ')[0]))?.status === 'PASS' ? '✅' : '❌'} ${req}`
              ).join('\n');
              
              comment += `\n\n<details>\n<summary>📊 Detailed Results</summary>\n\n`;
              comment += summary.suites.map(suite => 
                `- ${suite.status === 'PASS' ? '✅' : suite.status === 'FAIL' ? '❌' : '⏭️'} **${suite.name}** ${suite.details ? `- ${suite.details}` : ''}`
              ).join('\n');
              comment += `\n\n</details>\n\n`;
              
              comment += `**🔗 Correlation ID:** \`${summary.testRun.correlationId}\`\n`;
            } else {
              comment += `**Status:** ⏳ Running or no results found\n`;
              comment += `**Note:** Modular test suite results may be available in test artifacts\n\n`;
            }
            
            comment += `\n### 🎯 Enhanced Testing Features\n`;
            comment += `- ✅ **Modular Test Components:** Reusable auth, booking, health modules\n`;
            comment += `- ✅ **Preview Environment:** Full-stack staging mirror for true E2E fidelity\n`;
            comment += `- ✅ **Real Integration Testing:** No local stubs - tests against deployed services\n`;
            comment += `- ✅ **Production Readiness:** Comprehensive validation across all systems\n`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Separate job for Lighthouse-only runs (faster feedback)
  lighthouse-check:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Determine test URL for Lighthouse
        id: lighthouse-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            # Verify preview URL accessibility before Lighthouse tests
            echo "Verifying preview URL for Lighthouse: $PREVIEW_URL"
            
            if curl -f -s --max-time 15 "$PREVIEW_URL" > /dev/null; then
              TEST_URL="$PREVIEW_URL"
              echo "✅ Using preview URL for Lighthouse: $TEST_URL"
            else
              echo "❌ Preview URL not accessible, using fallback"
              TEST_URL="${{ secrets.STAGING_URL || secrets.PRODUCTION_URL || 'https://staging.netlify.app' }}"
            fi
          else
            TEST_URL="${{ secrets.STAGING_URL || secrets.PRODUCTION_URL || 'https://staging.netlify.app' }}"
            echo "Using fallback URL for Lighthouse: $TEST_URL"
          fi
          
          echo "lighthouse-url=$TEST_URL" >> $GITHUB_OUTPUT
        
      - name: Run Lighthouse tests with desktop and mobile presets
        env:
          TEST_URL: ${{ steps.lighthouse-url.outputs.lighthouse-url }}
        run: |
          chmod +x ./scripts/run-lighthouse-tests.sh
          # Override URL for Lighthouse tests to use determined URL
          export PRODUCTION_URL="$TEST_URL"
          
          echo "Running Lighthouse tests against: $TEST_URL"
          echo "Testing with both desktop and mobile presets..."
          
          # Run with desktop preset
          echo "Running desktop Lighthouse audit..."
          lighthouse "$TEST_URL" \
            --preset=desktop \
            --output=html,json \
            --output-path=./test-results/lighthouse-desktop \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --timeout=60000 || echo "Desktop Lighthouse completed with warnings"
          
          # Run with mobile preset  
          echo "Running mobile Lighthouse audit..."
          lighthouse "$TEST_URL" \
            --preset=mobile \
            --output=html,json \
            --output-path=./test-results/lighthouse-mobile \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --timeout=60000 || echo "Mobile Lighthouse completed with warnings"
          
          # Also run the existing script for comprehensive testing
          ./scripts/run-lighthouse-tests.sh || echo "Extended Lighthouse tests completed"
          
      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ github.run_number }}
          path: test-results/lighthouse-*/
          retention-days: 14

  # Security-only check for faster security feedback  
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq
        
      - name: Determine security test URL
        id: security-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            # Wait for preview URL to be ready with exponential backoff
            echo "Waiting for preview URL to be ready for security tests: $PREVIEW_URL"
            
            MAX_ATTEMPTS=8
            ATTEMPT=1
            DELAY=5
            URL_READY=false
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Security URL check attempt $ATTEMPT/$MAX_ATTEMPTS"
              
              if curl -f -s --max-time 20 "$PREVIEW_URL" > /dev/null; then
                echo "✅ Preview URL ready for security testing"
                URL_READY=true
                break
              else
                echo "❌ Preview URL not ready, waiting ${DELAY}s..."
                sleep $DELAY
                DELAY=$((DELAY + 3))  # More gradual backoff for security checks
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done
            
            if [ "$URL_READY" = "true" ]; then
              TEST_URL="$PREVIEW_URL"
              echo "✅ Using verified preview URL for security tests: $TEST_URL"
            else
              echo "❌ Preview URL not ready after retries, using fallback"
              TEST_URL="${{ secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}"
            fi
          else
            TEST_URL="${{ secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}"
            echo "Using fallback URL for security tests: $TEST_URL"
          fi
          
          echo "security-url=$TEST_URL" >> $GITHUB_OUTPUT
        
      - name: Run security tests on preview/production
        env:
          TEST_URL: ${{ steps.security-url.outputs.security-url }}
        run: |
          chmod +x ./scripts/run-security-tests.sh
          # Override URL for security tests
          export PRODUCTION_URL="$TEST_URL"
          
          echo "Running security validation against: $TEST_URL"
          ./scripts/run-security-tests.sh
          
      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results-${{ github.run_number }}
          path: test-results/security-*/
          retention-days: 30