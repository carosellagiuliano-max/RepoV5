name: Production End-to-End Tests

# Explicit permissions for fork handling and security
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write
  issues: write

# Concurrency control to cancel in-progress runs for the same PR/branch
concurrency:
  group: production-e2e-${{ github.ref }}
  cancel-in-progress: true

'on':
  # Run on main branch pushes
  push:
    branches: [main, production]
  
  # Run on pull requests for build/test jobs with hardened checkout
  pull_request:
    branches: [main]
  
  # Run on pull requests from forks - use pull_request_target for reporting only
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [main]
  
  # Allow manual triggers
  workflow_dispatch:
    inputs:
      production_url:
        description: 'Production URL to test'
        required: false
        default: 'https://your-site.netlify.app'
        type: string
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - modular
          - basic
          - security
          - lighthouse
          - health
      quick_mode:
        description: 'Run in quick mode (skip Lighthouse)'
        required: false
        default: false
        type: boolean

jobs:
  # Prepare phase: Install dependencies, lint, type check, unit test
  prepare:
    name: Prepare - Install & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    outputs:
      is-fork: ${{ steps.check-fork.outputs.is-fork }}
      github-token: ${{ steps.token-selection.outputs.github-token }}
    
    steps:
      - name: Check if fork PR
        id: check-fork
        run: |
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            IS_FORK=${{ github.event.pull_request.head.repo.fork }}
          else
            IS_FORK=false
          fi
          echo "is-fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "Fork PR: $IS_FORK"
      
      - name: Select appropriate token
        id: token-selection
        run: |
          if [ "${{ steps.check-fork.outputs.is-fork }}" = "true" ]; then
            if [ -n "${{ secrets.BOT_PAT }}" ]; then
              echo "github-token=${{ secrets.BOT_PAT }}" >> $GITHUB_OUTPUT
              echo "Using BOT_PAT for fork PR"
            else
              echo "github-token=${{ github.token }}" >> $GITHUB_OUTPUT
              echo "BOT_PAT not available, using github.token"
            fi
          else
            echo "github-token=${{ github.token }}" >> $GITHUB_OUTPUT
            echo "Using github.token for internal PR/push"
          fi
      
      - name: Hardened checkout for security
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npx tsc --noEmit
        
      - name: Run unit tests
        run: npm test
        
      - name: Run npm audit and fix critical vulnerabilities
        run: |
          echo "Running npm audit to check for vulnerabilities..."
          npm audit --audit-level=high || echo "Audit found issues, attempting to fix..."
          npm audit fix --force || echo "Some vulnerabilities could not be auto-fixed"

  # Build phase: Build application and functions
  build:
    name: Build Application & Functions  
    runs-on: ubuntu-latest
    needs: [prepare]
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            dist/
            netlify/functions/
          retention-days: 1

  # Reporting job for pull_request_target events (fork PRs) - no checkout needed
  fork-pr-status:
    name: Fork PR Status Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    timeout-minutes: 5
    
    steps:
      - name: Report fork PR status
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const isFork = ${{ github.event.pull_request.head.repo.fork }};
            
            const comment = isFork 
              ? `## üîí Forked PR - Security Notice
              
              **This PR originates from a forked repository and runs with limited permissions for security.**
              
              **Available Actions:**
              - ‚úÖ Basic validation will run on internal builds
              - ‚úÖ Code review by maintainers
              - üîí Full E2E tests require maintainer approval or merge
              
              **For maintainers:** To run full tests, checkout this branch locally and push to main repository.`
              : `## üöÄ PR Testing Status
              
              **This PR is from the main repository and will run full test suite:**
              - ‚úÖ ESLint, TypeScript, and unit tests
              - ‚úÖ Application and function builds
              - ‚úÖ Preview environment deployment
              - ‚úÖ End-to-end tests (Playwright matrix)
              - ‚úÖ Security validation
              - ‚úÖ Lighthouse performance checks
              - ‚úÖ Design lock validation`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deploy to preview environment for PR testing
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    outputs:
      preview-url: ${{ steps.preview-server.outputs.preview-url }}
      deploy-status: ${{ steps.preview-server.outputs.deploy-status }}
      
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          
      - name: Seed test data before preview
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Seeding test data..."
          node scripts/seed-test-data.ts || echo "Seed script completed with warnings"
        
      - name: Start preview server and wait for readiness
        id: preview-server
        env:
          DB_MOCK_MODE: true
          MOCK_MODE: true
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          echo "Starting preview server on port 4173..."
          npm run preview &
          PREVIEW_PID=$!
          
          # Wait for server to be ready with exponential backoff
          echo "Waiting for preview server to be ready..."
          MAX_ATTEMPTS=15
          ATTEMPT=1
          DELAY=5
          PREVIEW_URL="http://localhost:4173"
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking $PREVIEW_URL"
            
            if curl -f -s --max-time 10 "$PREVIEW_URL" > /dev/null; then
              echo "‚úÖ Preview server is ready!"
              echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
              echo "deploy-status=success" >> $GITHUB_OUTPUT
              
              # Keep server running for E2E tests
              echo "PREVIEW_PID=$PREVIEW_PID" >> $GITHUB_ENV
              echo "Preview server PID: $PREVIEW_PID"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Preview server failed to start after $MAX_ATTEMPTS attempts"
                echo "deploy-status=failed" >> $GITHUB_OUTPUT
                kill $PREVIEW_PID 2>/dev/null || true
                exit 1
              fi
              
              echo "‚ùå Preview not ready, waiting ${DELAY}s before retry..."
              sleep $DELAY
              DELAY=$((DELAY * 2))
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "‚úÖ Preview server verified and ready for testing"
      
      - name: Comment preview URL on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const previewUrl = '${{ steps.preview-server.outputs.preview-url }}';
            const deployStatus = '${{ steps.preview-server.outputs.deploy-status }}';
            
            let comment;
            
            if (deployStatus === 'success' && previewUrl) {
              comment = `## üöÄ Preview Environment Ready
              
              **Preview URL:** ${previewUrl}
              
              The local preview environment has been started and is ready for testing.
              End-to-end tests will run against this preview server to ensure staging mirrors production.
              
              **Preview Features:**
              - ‚úÖ Local preview server on port 4173
              - ‚úÖ Production-like configuration
              - ‚úÖ Real database connections (test environment)
              - ‚úÖ Complete integration testing
              - ‚úÖ Test data seeded for E2E validation
              
              ‚è≥ **Next:** Automated E2E tests are now running against this preview...
              `;
            } else {
              comment = `## ‚ùå Preview Environment Failed
              
              The preview environment setup failed. E2E tests will run against the production URL as a fallback.
              
              **Fallback behavior:**
              - Tests will use production URL for validation
              - Security and Lighthouse checks will still run
              - Check the "Deploy Preview Environment" job logs for details
              
              Please check the deployment logs and ensure:
              - Build process completes successfully
              - Preview server starts correctly on port 4173
              - Network connectivity is available
              `;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Enhanced production E2E tests with preview support
  e2e:
    name: End-to-End Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [prepare, build, deploy-preview]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/2, 2/2]
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Determine test URL and validate preview
        id: test-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            TEST_URL="$PREVIEW_URL"
            TEST_ENV="preview"
            echo "‚úÖ Using preview environment URL: $TEST_URL"
          elif [ "${{ github.event.inputs.production_url }}" != "" ]; then
            TEST_URL="${{ github.event.inputs.production_url }}"
            TEST_ENV="manual"
            echo "Using manual input URL: $TEST_URL"
          elif [ "${{ secrets.PRODUCTION_URL }}" != "" ]; then
            TEST_URL="${{ secrets.PRODUCTION_URL }}"
            TEST_ENV="production"
            echo "Using production URL: $TEST_URL"
          else
            TEST_URL="https://your-site.netlify.app"
            TEST_ENV="fallback"
            echo "Using fallback URL: $TEST_URL"
          fi
          
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "test-env=$TEST_ENV" >> $GITHUB_OUTPUT
        
      - name: Seed test data for E2E
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Seeding test data for E2E tests..."
          node scripts/seed-test-data.ts || echo "Seed script completed with warnings"
        
      - name: Run Playwright E2E tests
        env:
          BASE_URL: ${{ steps.test-url.outputs.test-url }}
          TEST_ENV: ${{ steps.test-url.outputs.test-env }}
          BROWSER: ${{ matrix.browser }}
          SHARD: ${{ matrix.shard }}
          DB_MOCK_MODE: true
          MOCK_MODE: true
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          echo "Running Playwright E2E tests..."
          echo "Browser: ${{ matrix.browser }}"
          echo "Shard: ${{ matrix.shard }}"
          echo "Base URL: ${{ steps.test-url.outputs.test-url }}"
          echo "Environment: ${{ steps.test-url.outputs.test-env }}"
          
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }} --retries=2
          
      - name: Clean test data after E2E
        if: always()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Cleaning up test data..."
          node scripts/clean-test-data.ts || echo "Cleanup script completed with warnings"
          
      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}-${{ github.run_number }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30
          
      - name: Upload JUnit XML results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-${{ matrix.browser }}-${{ matrix.shard }}-${{ github.run_number }}
          path: test-results/junit.xml
          retention-days: 30
          
      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ matrix.browser }}-${{ matrix.shard }}-${{ github.run_number }}
          path: test-results/
          retention-days: 7

  # Run modular production E2E tests
  production-e2e-tests:
    name: Modular Production E2E Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [prepare, build, deploy-preview]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y curl jq bc
          
      - name: Determine test URL and validate preview
        id: test-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            # Verify preview URL is still accessible
            echo "Verifying preview URL accessibility: $PREVIEW_URL"
            
            if curl -f -s --max-time 15 "$PREVIEW_URL" > /dev/null; then
              TEST_URL="$PREVIEW_URL"
              TEST_ENV="preview"
              echo "‚úÖ Using verified preview deployment URL: $TEST_URL"
            else
              echo "‚ùå Preview URL not accessible, falling back to production"
              TEST_URL="${{ github.event.inputs.production_url || secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}"
              TEST_ENV="fallback-from-preview"
            fi
          elif [ "${{ github.event.inputs.production_url }}" != "" ]; then
            TEST_URL="${{ github.event.inputs.production_url }}"
            TEST_ENV="manual"
            echo "Using manual input URL: $TEST_URL"
          elif [ "${{ secrets.PRODUCTION_URL }}" != "" ]; then
            TEST_URL="${{ secrets.PRODUCTION_URL }}"
            TEST_ENV="production"
            echo "Using production URL: $TEST_URL"
          else
            TEST_URL="https://your-site.netlify.app"
            TEST_ENV="fallback"
            echo "Using fallback URL: $TEST_URL"
          fi
          
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "test-env=$TEST_ENV" >> $GITHUB_OUTPUT
          
          # Fail fast if no valid URL is available
          if [ "$TEST_URL" = "" ]; then
            echo "‚ùå No valid test URL available. Cannot proceed with E2E tests."
            exit 1
          fi
        
      - name: Seed test data for modular E2E
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Seeding test data for modular E2E tests..."
          node scripts/seed-test-data.ts || echo "Seed script completed with warnings"
        
      - name: Run modular production E2E tests with enhanced logging
        env:
          PREVIEW_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          PRODUCTION_URL: ${{ steps.test-url.outputs.test-url }}
          TEST_ENV: ${{ steps.test-url.outputs.test-env }}
          DB_MOCK_MODE: true
          MOCK_MODE: true
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          echo "Running modular test suite with enhanced logging..."
          echo "Test URL: ${{ steps.test-url.outputs.test-url }}"
          echo "Environment: ${{ steps.test-url.outputs.test-env }}"
          
          # Add enhanced logging before critical test assertions
          export DEBUG_MODULAR_TESTS=true
          npm run test src/test/modular-production-e2e.test.ts
          
      - name: Clean test data after modular E2E
        if: always()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST || secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_TEST || secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Cleaning up test data..."
          node scripts/clean-test-data.ts || echo "Cleanup script completed with warnings"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-results-${{ github.run_number }}
          path: |
            test-results/
            !test-results/**/*.log
          retention-days: 30
          
      - name: Upload JUnit XML results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-${{ github.run_number }}
          path: test-results/junit.xml
          retention-days: 30
          
      - name: Upload detailed logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-logs-${{ github.run_number }}
          path: test-results/**/*.log
          retention-days: 7
          
      - name: Comment PR with enhanced results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const testUrl = '${{ steps.test-url.outputs.test-url }}';
            const testEnv = '${{ steps.test-url.outputs.test-env }}';
            const previewUrl = '${{ needs.deploy-preview.outputs.preview-url }}';
            
            // Create enhanced comment with preview information
            let comment = `## üß™ Enhanced Production E2E Test Results\n\n`;
            
            if (previewUrl) {
              comment += `**üöÄ Preview Environment:** ${previewUrl}\n`;
              comment += `**‚úÖ Local Preview Server:** Tests ran against local preview on port 4173\n`;
            }
            
            comment += `**üåê Test URL:** ${testUrl}\n`;
            comment += `**üè∑Ô∏è Environment:** ${testEnv}\n\n`;
            
            comment += `### üéØ Enhanced Testing Features\n`;
            comment += `- ‚úÖ **Modular Test Components:** Reusable auth, booking, health modules\n`;
            comment += `- ‚úÖ **Local Preview Server:** True integration testing on port 4173\n`;
            comment += `- ‚úÖ **Test Data Management:** Automated seeding and cleanup\n`;
            comment += `- ‚úÖ **Production Readiness:** Comprehensive validation across all systems\n`;
            comment += `- ‚úÖ **Multi-browser Testing:** Chromium, Firefox, WebKit with sharding\n`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security validation suite
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [prepare, build, deploy-preview]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 15
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq
        
      - name: Determine security test URL
        id: security-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            TEST_URL="$PREVIEW_URL"
            echo "‚úÖ Using verified preview URL for security tests: $TEST_URL"
          else
            TEST_URL="${{ secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}"
            echo "Using fallback URL for security tests: $TEST_URL"
          fi
          
          echo "security-url=$TEST_URL" >> $GITHUB_OUTPUT
        
      - name: Run security tests on preview/production
        env:
          TEST_URL: ${{ steps.security-url.outputs.security-url }}
        run: |
          chmod +x ./scripts/run-security-tests.sh
          # Override URL for security tests
          export PRODUCTION_URL="$TEST_URL"
          
          echo "Running security validation against: $TEST_URL"
          ./scripts/run-security-tests.sh
          
      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results-${{ github.run_number }}
          path: test-results/security-*/
          retention-days: 30

  # Lighthouse performance check
  lighthouse-check:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: [prepare, build, deploy-preview]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 15
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Determine test URL for Lighthouse
        id: lighthouse-url
        run: |
          PREVIEW_URL="${{ needs.deploy-preview.outputs.preview-url }}"
          PREVIEW_STATUS="${{ needs.deploy-preview.outputs.deploy-status }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "$PREVIEW_URL" != "" ] && [ "$PREVIEW_STATUS" = "success" ]; then
            TEST_URL="$PREVIEW_URL"
            echo "‚úÖ Using preview URL for Lighthouse: $TEST_URL"
          else
            TEST_URL="${{ secrets.STAGING_URL || secrets.PRODUCTION_URL || 'https://staging.netlify.app' }}"
            echo "Using fallback URL for Lighthouse: $TEST_URL"
          fi
          
          echo "lighthouse-url=$TEST_URL" >> $GITHUB_OUTPUT
        
      - name: Run Lighthouse tests with desktop and mobile presets
        env:
          TEST_URL: ${{ steps.lighthouse-url.outputs.lighthouse-url }}
        run: |
          chmod +x ./scripts/run-lighthouse-tests.sh
          # Override URL for Lighthouse tests to use determined URL
          export PRODUCTION_URL="$TEST_URL"
          
          echo "Running Lighthouse tests against: $TEST_URL"
          echo "Testing with both desktop and mobile presets..."
          
          # Run with desktop preset
          echo "Running desktop Lighthouse audit..."
          lighthouse "$TEST_URL" \
            --preset=desktop \
            --output=html,json \
            --output-path=./test-results/lighthouse-desktop \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --timeout=60000 || echo "Desktop Lighthouse completed with warnings"
          
          # Run with mobile preset  
          echo "Running mobile Lighthouse audit..."
          lighthouse "$TEST_URL" \
            --preset=mobile \
            --output=html,json \
            --output-path=./test-results/lighthouse-mobile \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --timeout=60000 || echo "Mobile Lighthouse completed with warnings"
          
          # Also run the existing script for comprehensive testing
          ./scripts/run-lighthouse-tests.sh || echo "Extended Lighthouse tests completed"
          
      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ github.run_number }}
          path: test-results/lighthouse-*/
          retention-days: 14

  # Design lock validation to ensure no UI changes
  design-lock:
    name: Design Lock Validation
    runs-on: ubuntu-latest
    needs: [prepare, build, e2e, production-e2e-tests, security-check, lighthouse-check]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 5
    
    steps:
      - name: Hardened checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          persist-credentials: false
          fetch-depth: 1
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Run design lock validation
        run: |
          chmod +x ./scripts/design-lock.js
          node ./scripts/design-lock.js
          
      - name: Upload design lock results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: design-lock-results-${{ github.run_number }}
          path: test-results/design-lock-*/
          retention-days: 7