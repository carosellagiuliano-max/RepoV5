name: Production End-to-End Tests

on:
  # Run on main branch pushes
  push:
    branches: [main, production]
  
  # Run on pull requests to main
  pull_request:
    branches: [main]
  
  # Allow manual triggers
  workflow_dispatch:
    inputs:
      production_url:
        description: 'Production URL to test'
        required: false
        default: 'https://your-site.netlify.app'
        type: string
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - modular
          - basic
          - security
          - lighthouse
          - health
      quick_mode:
        description: 'Run in quick mode (skip Lighthouse)'
        required: false
        default: false
        type: boolean

jobs:
  # Deploy to preview environment for PR testing
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: npm run build
        env:
          NODE_ENV: staging
          
      - name: Deploy to Netlify Preview
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          npm install -g netlify-cli
          
          # Deploy to preview with unique alias
          PREVIEW_ALIAS="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-8)"
          
          netlify deploy \
            --dir=dist \
            --site=$NETLIFY_SITE_ID \
            --auth=$NETLIFY_AUTH_TOKEN \
            --alias=$PREVIEW_ALIAS \
            --json > deploy-result.json
            
          # Extract preview URL
          PREVIEW_URL=$(cat deploy-result.json | jq -r '.deploy_url')
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview deployed to: $PREVIEW_URL"
          
          # Wait for deployment to be ready
          echo "Waiting for preview to be ready..."
          sleep 30
          
          # Verify deployment is accessible
          curl -f --retry 5 --retry-delay 5 "$PREVIEW_URL" || exit 1
          
      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            const comment = `## 🚀 Preview Deployment Ready
            
            **Preview URL:** ${previewUrl}
            
            The preview environment has been deployed and is ready for testing.
            End-to-end tests will run against this preview deployment to ensure staging mirrors production.
            
            **Preview Features:**
            - ✅ Full-stack staging mirror
            - ✅ Production-like configuration
            - ✅ Real database connections (staging)
            - ✅ Complete integration testing
            
            ⏳ **Next:** Automated E2E tests are now running against this preview...
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Enhanced production E2E tests with preview support
  production-e2e-tests:
    name: Production E2E Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [deploy-preview]
    if: always() # Run even if preview deployment fails (fallback to production URL)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y curl jq bc
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Determine test URL
        id: test-url
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ needs.deploy-preview.outputs.preview-url }}" != "" ]; then
            TEST_URL="${{ needs.deploy-preview.outputs.preview-url }}"
            TEST_ENV="preview"
            echo "Using preview deployment URL: $TEST_URL"
          elif [ "${{ github.event.inputs.production_url }}" != "" ]; then
            TEST_URL="${{ github.event.inputs.production_url }}"
            TEST_ENV="manual"
            echo "Using manual input URL: $TEST_URL"
          elif [ "${{ secrets.PRODUCTION_URL }}" != "" ]; then
            TEST_URL="${{ secrets.PRODUCTION_URL }}"
            TEST_ENV="production"
            echo "Using production URL: $TEST_URL"
          else
            TEST_URL="https://your-site.netlify.app"
            TEST_ENV="fallback"
            echo "Using fallback URL: $TEST_URL"
          fi
          
          echo "test-url=$TEST_URL" >> $GITHUB_OUTPUT
          echo "test-env=$TEST_ENV" >> $GITHUB_OUTPUT
        
      - name: Run modular production E2E tests
        env:
          PREVIEW_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          PRODUCTION_URL: ${{ steps.test-url.outputs.test-url }}
          TEST_ENV: ${{ steps.test-url.outputs.test-env }}
        run: |
          # Set test options based on inputs
          TEST_OPTIONS=""
          if [ "${{ github.event.inputs.test_suite }}" = "modular" ] || [ "${{ github.event.inputs.test_suite }}" = "" ] || [ "${{ github.event.inputs.test_suite }}" = "all" ]; then
            echo "Running modular test suite..."
            # Run modular tests
            npm run test src/test/modular-production-e2e.test.ts
            TEST_OPTIONS="--suite modular"
          fi
          
          if [ "${{ github.event.inputs.test_suite }}" != "modular" ]; then
            if [ "${{ github.event.inputs.test_suite }}" != "" ] && [ "${{ github.event.inputs.test_suite }}" != "all" ]; then
              TEST_OPTIONS="--suite ${{ github.event.inputs.test_suite }}"
            fi
            if [ "${{ github.event.inputs.quick_mode }}" = "true" ]; then
              TEST_OPTIONS="$TEST_OPTIONS --quick"
            fi
            
            # Run the master test suite
            ./scripts/run-master-e2e-tests.sh $TEST_OPTIONS
          fi
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-results-${{ github.run_number }}
          path: |
            test-results/
            !test-results/**/*.log
          retention-days: 30
          
      - name: Upload detailed logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: production-e2e-logs-${{ github.run_number }}
          path: test-results/**/*.log
          retention-days: 7
          
      - name: Comment PR with enhanced results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const testUrl = '${{ steps.test-url.outputs.test-url }}';
            const testEnv = '${{ steps.test-url.outputs.test-env }}';
            const previewUrl = '${{ needs.deploy-preview.outputs.preview-url }}';
            
            // Find the latest test results
            const resultsDir = './test-results';
            let summary = null;
            
            if (fs.existsSync(resultsDir)) {
              const dirs = fs.readdirSync(resultsDir)
                .filter(d => d.startsWith('master-e2e-'))
                .sort()
                .reverse();
                
              if (dirs.length > 0) {
                const latestDir = path.join(resultsDir, dirs[0]);
                const summaryFile = path.join(latestDir, 'master-test-summary.json');
                
                if (fs.existsSync(summaryFile)) {
                  summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
                }
              }
            }
            
            // Create enhanced comment with preview information
            let comment = `## 🧪 Enhanced Production E2E Test Results\n\n`;
            
            if (previewUrl) {
              comment += `**🚀 Preview Environment:** ${previewUrl}\n`;
              comment += `**✅ Full-Stack Staging Mirror:** Tests ran against deployed preview\n`;
            }
            
            comment += `**🌐 Test URL:** ${testUrl}\n`;
            comment += `**🏷️ Environment:** ${testEnv}\n\n`;
            
            if (summary) {
              const statusIcon = summary.summary.failedSuites === 0 ? '✅' : '❌';
              const statusText = summary.summary.failedSuites === 0 ? 'PASSED' : 'FAILED';
              
              comment += `**Status:** ${statusIcon} ${statusText}\n`;
              comment += `**Success Rate:** ${summary.summary.successRate}%\n\n`;
              
              comment += `| Metric | Value |\n`;
              comment += `|--------|---------|\n`;
              comment += `| Total Suites | ${summary.summary.totalSuites} |\n`;
              comment += `| Passed | ✅ ${summary.summary.passedSuites} |\n`;
              comment += `| Failed | ❌ ${summary.summary.failedSuites} |\n\n`;
              
              comment += `### 📋 Test Categories\n`;
              comment += summary.requirements.map(req => 
                `- ${summary.suites.find(s => s.name.includes(req.split(' ')[0]))?.status === 'PASS' ? '✅' : '❌'} ${req}`
              ).join('\n');
              
              comment += `\n\n<details>\n<summary>📊 Detailed Results</summary>\n\n`;
              comment += summary.suites.map(suite => 
                `- ${suite.status === 'PASS' ? '✅' : suite.status === 'FAIL' ? '❌' : '⏭️'} **${suite.name}** ${suite.details ? `- ${suite.details}` : ''}`
              ).join('\n');
              comment += `\n\n</details>\n\n`;
              
              comment += `**🔗 Correlation ID:** \`${summary.testRun.correlationId}\`\n`;
            } else {
              comment += `**Status:** ⏳ Running or no results found\n`;
              comment += `**Note:** Modular test suite results may be available in test artifacts\n\n`;
            }
            
            comment += `\n### 🎯 Enhanced Testing Features\n`;
            comment += `- ✅ **Modular Test Components:** Reusable auth, booking, health modules\n`;
            comment += `- ✅ **Preview Environment:** Full-stack staging mirror for true E2E fidelity\n`;
            comment += `- ✅ **Real Integration Testing:** No local stubs - tests against deployed services\n`;
            comment += `- ✅ **Production Readiness:** Comprehensive validation across all systems\n`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Separate job for Lighthouse-only runs (faster feedback)
  lighthouse-check:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request' && always()
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Run Lighthouse tests on preview
        env:
          TEST_URL: ${{ needs.deploy-preview.outputs.preview-url || secrets.STAGING_URL || 'https://staging.netlify.app' }}
        run: |
          chmod +x ./scripts/run-lighthouse-tests.sh
          # Override URL for Lighthouse tests to use preview
          export PRODUCTION_URL="$TEST_URL"
          ./scripts/run-lighthouse-tests.sh
          
      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ github.run_number }}
          path: test-results/lighthouse-*/
          retention-days: 14

  # Security-only check for faster security feedback  
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq
        
      - name: Run security tests on preview/production
        env:
          TEST_URL: ${{ needs.deploy-preview.outputs.preview-url || secrets.PRODUCTION_URL || 'https://your-site.netlify.app' }}
        run: |
          chmod +x ./scripts/run-security-tests.sh
          # Override URL for security tests
          export PRODUCTION_URL="$TEST_URL"
          ./scripts/run-security-tests.sh
          
      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results-${{ github.run_number }}
          path: test-results/security-*/
          retention-days: 30